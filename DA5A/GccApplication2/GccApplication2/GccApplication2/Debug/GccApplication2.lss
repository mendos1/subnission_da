
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017e  00800100  00000e66  00000efa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080027e  0080027e  00001078  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001abd  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c42  00000000  00000000  00002ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b40  00000000  00000000  0000392b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  0000446c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000677  00000000  00000000  000046fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000904  00000000  00000000  00004d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005677  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 37       	cpi	r26, 0x7E	; 126
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e7       	ldi	r26, 0x7E	; 126
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 41 01 	call	0x282	; 0x282 <main>
  9e:	0c 94 31 07 	jmp	0xe62	; 0xe62 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
    }
}

//	Interrupt on IRQ pin
ISR(INT0_vect) 
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	message_received = true;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <__data_end>
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <ADC_INIT>:

void ADC_INIT(void)
{
	
	ADMUX = (0<<REFS1)| // Reference Selection Bits
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	(0<<ADLAR)| // ADC Left Adjust Result
	(1<<MUX2)| // ANalog Channel Selection Bits
	(0<<MUX1)| //
	(0<<MUX0);

	ADCSRA = (1<<ADEN)| // ADC ENable
  ca:	85 e8       	ldi	r24, 0x85	; 133
  cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  d0:	08 95       	ret

000000d2 <READ_ADC>:
	//TCNT1 = 49911; //((16MHz/1024)*1)-1 = 15624

}
void READ_ADC(void) {
	unsigned char i =4;
	ADC_TEMP = 0; //initialize
  d2:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <ADC_TEMP+0x1>
  d6:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <ADC_TEMP>
  da:	24 e0       	ldi	r18, 0x04	; 4
	while (i--) {
		ADCSRA |= (1<<ADSC);
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
		while(ADCSRA & (1<<ADSC));
		ADC_TEMP+= ADC;
  e0:	a8 e7       	ldi	r26, 0x78	; 120
  e2:	b0 e0       	ldi	r27, 0x00	; 0
}
void READ_ADC(void) {
	unsigned char i =4;
	ADC_TEMP = 0; //initialize
	while (i--) {
		ADCSRA |= (1<<ADSC);
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
		while(ADCSRA & (1<<ADSC));
  ea:	80 81       	ld	r24, Z
  ec:	86 fd       	sbrc	r24, 6
  ee:	fd cf       	rjmp	.-6      	; 0xea <READ_ADC+0x18>
		ADC_TEMP+= ADC;
  f0:	8d 91       	ld	r24, X+
  f2:	9c 91       	ld	r25, X
  f4:	11 97       	sbiw	r26, 0x01	; 1
  f6:	40 91 7f 02 	lds	r20, 0x027F	; 0x80027f <ADC_TEMP>
  fa:	50 91 80 02 	lds	r21, 0x0280	; 0x800280 <ADC_TEMP+0x1>
  fe:	84 0f       	add	r24, r20
 100:	95 1f       	adc	r25, r21
 102:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <ADC_TEMP+0x1>
 106:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <ADC_TEMP>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	3f ef       	ldi	r19, 0xFF	; 255
 10c:	80 e7       	ldi	r24, 0x70	; 112
 10e:	92 e0       	ldi	r25, 0x02	; 2
 110:	31 50       	subi	r19, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <READ_ADC+0x3e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <READ_ADC+0x48>
 11a:	00 00       	nop
 11c:	21 50       	subi	r18, 0x01	; 1

}
void READ_ADC(void) {
	unsigned char i =4;
	ADC_TEMP = 0; //initialize
	while (i--) {
 11e:	11 f7       	brne	.-60     	; 0xe4 <READ_ADC+0x12>
		ADCSRA |= (1<<ADSC);
		while(ADCSRA & (1<<ADSC));
		ADC_TEMP+= ADC;
		_delay_ms(50);
	}
	ADC_TEMP = ADC_TEMP/8 ; // Average
 120:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <ADC_TEMP>
 124:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <ADC_TEMP+0x1>
 128:	96 95       	lsr	r25
 12a:	87 95       	ror	r24
 12c:	96 95       	lsr	r25
 12e:	87 95       	ror	r24
 130:	96 95       	lsr	r25
 132:	87 95       	ror	r24
 134:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <ADC_TEMP+0x1>
 138:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <ADC_TEMP>
 13c:	08 95       	ret

0000013e <print_config>:
}



void print_config(void)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	1f 92       	push	r1
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	printf("Startup successful\n\n nRF24L01+ configured as:\n");
 148:	86 e2       	ldi	r24, 0x26	; 38
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 17 04 	call	0x82e	; 0x82e <puts>
	printf("-------------------------------------------\n");
 150:	84 e5       	ldi	r24, 0x54	; 84
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 17 04 	call	0x82e	; 0x82e <puts>
	nrf24_read(CONFIG,&data,1);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	be 01       	movw	r22, r28
 15e:	6f 5f       	subi	r22, 0xFF	; 255
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	printf("CONFIG			0x%02X\n",data);
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	1f 92       	push	r1
 16c:	8f 93       	push	r24
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	9f 93       	push	r25
 174:	8f 93       	push	r24
 176:	0e 94 01 04 	call	0x802	; 0x802 <printf>
	nrf24_read(EN_AA,&data,1);
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	be 01       	movw	r22, r28
 180:	6f 5f       	subi	r22, 0xFF	; 255
 182:	7f 4f       	sbci	r23, 0xFF	; 255
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	printf("EN_AA			0x%02X\n",data);
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	1f 92       	push	r1
 18e:	8f 93       	push	r24
 190:	81 e9       	ldi	r24, 0x91	; 145
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	9f 93       	push	r25
 196:	8f 93       	push	r24
 198:	0e 94 01 04 	call	0x802	; 0x802 <printf>
	nrf24_read(EN_RXADDR,&data,1);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	be 01       	movw	r22, r28
 1a2:	6f 5f       	subi	r22, 0xFF	; 255
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	printf("EN_RXADDR		0x%02X\n",data);
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	1f 92       	push	r1
 1b0:	8f 93       	push	r24
 1b2:	81 ea       	ldi	r24, 0xA1	; 161
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	9f 93       	push	r25
 1b8:	8f 93       	push	r24
 1ba:	0e 94 01 04 	call	0x802	; 0x802 <printf>
	nrf24_read(SETUP_RETR,&data,1);
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	be 01       	movw	r22, r28
 1c4:	6f 5f       	subi	r22, 0xFF	; 255
 1c6:	7f 4f       	sbci	r23, 0xFF	; 255
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	printf("SETUP_RETR		0x%02X\n",data);
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	1f 92       	push	r1
 1d2:	8f 93       	push	r24
 1d4:	84 eb       	ldi	r24, 0xB4	; 180
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	9f 93       	push	r25
 1da:	8f 93       	push	r24
 1dc:	0e 94 01 04 	call	0x802	; 0x802 <printf>
	nrf24_read(RF_CH,&data,1);
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	be 01       	movw	r22, r28
 1e6:	6f 5f       	subi	r22, 0xFF	; 255
 1e8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	printf("RF_CH			0x%02X\n",data);
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	1f 92       	push	r1
 1f4:	8f 93       	push	r24
 1f6:	88 ec       	ldi	r24, 0xC8	; 200
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	9f 93       	push	r25
 1fc:	8f 93       	push	r24
 1fe:	0e 94 01 04 	call	0x802	; 0x802 <printf>
	nrf24_read(RF_SETUP,&data,1);
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	be 01       	movw	r22, r28
 208:	6f 5f       	subi	r22, 0xFF	; 255
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	printf("RF_SETUP		0x%02X\n",data);
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	1f 92       	push	r1
 216:	8f 93       	push	r24
 218:	88 ed       	ldi	r24, 0xD8	; 216
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	9f 93       	push	r25
 21e:	8f 93       	push	r24
 220:	0e 94 01 04 	call	0x802	; 0x802 <printf>
	nrf24_read(STATUS,&data,1);
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	be 01       	movw	r22, r28
 22a:	6f 5f       	subi	r22, 0xFF	; 255
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	printf("STATUS			0x%02X\n",data);
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	1f 92       	push	r1
 238:	8f 93       	push	r24
 23a:	8a ee       	ldi	r24, 0xEA	; 234
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	9f 93       	push	r25
 240:	8f 93       	push	r24
 242:	0e 94 01 04 	call	0x802	; 0x802 <printf>
	nrf24_read(FEATURE,&data,1);
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	be 01       	movw	r22, r28
 24c:	6f 5f       	subi	r22, 0xFF	; 255
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	8d e1       	ldi	r24, 0x1D	; 29
 252:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	printf("FEATURE			0x%02X\n",data);
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	1f 92       	push	r1
 25a:	8f 93       	push	r24
 25c:	8b ef       	ldi	r24, 0xFB	; 251
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	9f 93       	push	r25
 262:	8f 93       	push	r24
 264:	0e 94 01 04 	call	0x802	; 0x802 <printf>
	printf("-------------------------------------------\n\n");
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	8d e0       	ldi	r24, 0x0D	; 13
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	0e 94 17 04 	call	0x82e	; 0x82e <puts>
}
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <main>:
//	Used in IRQ ISR
volatile bool message_received = false;
volatile bool status = false;

int main(void)
{	
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	a0 97       	sbiw	r28, 0x20	; 32
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
	//	Set cliche message to send (message cannot exceed 32 characters)
	char tx_message[32];				// Define string array
	char *tx_ptr = tx_message;
	strcpy(tx_message,"Hi :) !");	// Copy string into array
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	ea e3       	ldi	r30, 0x3A	; 58
 29a:	f2 e0       	ldi	r31, 0x02	; 2
 29c:	de 01       	movw	r26, r28
 29e:	11 96       	adiw	r26, 0x01	; 1
 2a0:	01 90       	ld	r0, Z+
 2a2:	0d 92       	st	X+, r0
 2a4:	8a 95       	dec	r24
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0x1e>
	
	//	Initialize UART
	uart_init();
 2a8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <uart_init>
	
	//	Initialize nRF24L01+ and print configuration info
    nrf24_init();
 2ac:	0e 94 ca 01 	call	0x394	; 0x394 <nrf24_init>
	print_config();
 2b0:	0e 94 9f 00 	call	0x13e	; 0x13e <print_config>
	
	ADC_INIT(); 
 2b4:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_INIT>
	//	Start listening to incoming messages
	printf("start listening\n");
 2b8:	82 e4       	ldi	r24, 0x42	; 66
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	0e 94 17 04 	call	0x82e	; 0x82e <puts>
	nrf24_start_listening();
 2c0:	0e 94 ef 02 	call	0x5de	; 0x5de <nrf24_start_listening>
	printf("Done listening\n");
 2c4:	82 e5       	ldi	r24, 0x52	; 82
 2c6:	92 e0       	ldi	r25, 0x02	; 2
 2c8:	0e 94 17 04 	call	0x82e	; 0x82e <puts>
	
	ADC_TEMP = 0;
 2cc:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <ADC_TEMP+0x1>
 2d0:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <ADC_TEMP>
    while (1) 
    {
			//printf("outside if\n");
		READ_ADC();
		ADC_TEMP = 500 * ADC_TEMP / 1024;
 2d4:	0f 2e       	mov	r0, r31
 2d6:	f4 ef       	ldi	r31, 0xF4	; 244
 2d8:	cf 2e       	mov	r12, r31
 2da:	dd 24       	eor	r13, r13
 2dc:	d3 94       	inc	r13
 2de:	f0 2d       	mov	r31, r0
		tx_ptr = tx_message;
			sprintf(tx_ptr, "%d", ADC_TEMP);
 2e0:	0f 2e       	mov	r0, r31
 2e2:	f1 e6       	ldi	r31, 0x61	; 97
 2e4:	ef 2e       	mov	r14, r31
 2e6:	f2 e0       	ldi	r31, 0x02	; 2
 2e8:	ff 2e       	mov	r15, r31
 2ea:	f0 2d       	mov	r31, r0
 2ec:	8e 01       	movw	r16, r28
 2ee:	0f 5f       	subi	r16, 0xFF	; 255
 2f0:	1f 4f       	sbci	r17, 0xFF	; 255
	
	ADC_TEMP = 0;
    while (1) 
    {
			//printf("outside if\n");
		READ_ADC();
 2f2:	0e 94 69 00 	call	0xd2	; 0xd2 <READ_ADC>
		ADC_TEMP = 500 * ADC_TEMP / 1024;
 2f6:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <ADC_TEMP>
 2fa:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <ADC_TEMP+0x1>
 2fe:	2c 9d       	mul	r18, r12
 300:	c0 01       	movw	r24, r0
 302:	2d 9d       	mul	r18, r13
 304:	90 0d       	add	r25, r0
 306:	3c 9d       	mul	r19, r12
 308:	90 0d       	add	r25, r0
 30a:	11 24       	eor	r1, r1
 30c:	89 2f       	mov	r24, r25
 30e:	86 95       	lsr	r24
 310:	86 95       	lsr	r24
 312:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <ADC_TEMP>
 316:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <ADC_TEMP+0x1>
		tx_ptr = tx_message;
			sprintf(tx_ptr, "%d", ADC_TEMP);
 31a:	1f 92       	push	r1
 31c:	8f 93       	push	r24
 31e:	ff 92       	push	r15
 320:	ef 92       	push	r14
 322:	1f 93       	push	r17
 324:	0f 93       	push	r16
 326:	0e 94 47 04 	call	0x88e	; 0x88e <sprintf>
			nrf24_send_message(tx_ptr);
 32a:	c8 01       	movw	r24, r16
 32c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <nrf24_send_message>
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	da cf       	rjmp	.-76     	; 0x2f2 <main+0x70>

0000033e <nrf24_send_spi>:
	const void *ack = "A";
	unsigned int length = 1;
	csn_low;
	spi_send(W_ACK_PAYLOAD);
	while (length--) spi_send(*(uint8_t *)ack++);
	csn_high;
 33e:	df 92       	push	r13
 340:	ef 92       	push	r14
 342:	ff 92       	push	r15
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	7b 01       	movw	r14, r22
 34e:	8a 01       	movw	r16, r20
 350:	2a 98       	cbi	0x05, 2	; 5
 352:	0e 94 c6 03 	call	0x78c	; 0x78c <spi_exchange>
 356:	d8 2e       	mov	r13, r24
 358:	01 15       	cp	r16, r1
 35a:	11 05       	cpc	r17, r1
 35c:	51 f0       	breq	.+20     	; 0x372 <nrf24_send_spi+0x34>
 35e:	e7 01       	movw	r28, r14
 360:	0e 0d       	add	r16, r14
 362:	1f 1d       	adc	r17, r15
 364:	88 81       	ld	r24, Y
 366:	0e 94 c6 03 	call	0x78c	; 0x78c <spi_exchange>
 36a:	89 93       	st	Y+, r24
 36c:	c0 17       	cp	r28, r16
 36e:	d1 07       	cpc	r29, r17
 370:	c9 f7       	brne	.-14     	; 0x364 <nrf24_send_spi+0x26>
 372:	2a 9a       	sbi	0x05, 2	; 5
 374:	8d 2d       	mov	r24, r13
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	df 90       	pop	r13
 384:	08 95       	ret

00000386 <nrf24_write>:
 386:	80 62       	ori	r24, 0x20	; 32
 388:	0e 94 9f 01 	call	0x33e	; 0x33e <nrf24_send_spi>
 38c:	08 95       	ret

0000038e <nrf24_read>:
 38e:	0e 94 9f 01 	call	0x33e	; 0x33e <nrf24_send_spi>
 392:	08 95       	ret

00000394 <nrf24_init>:
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	1f 92       	push	r1
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	f8 94       	cli
 3a4:	e9 e6       	ldi	r30, 0x69	; 105
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	82 60       	ori	r24, 0x02	; 2
 3ac:	80 83       	st	Z, r24
 3ae:	e8 9a       	sbi	0x1d, 0	; 29
 3b0:	78 94       	sei
 3b2:	21 9a       	sbi	0x04, 1	; 4
 3b4:	22 9a       	sbi	0x04, 2	; 4
 3b6:	2a 9a       	sbi	0x05, 2	; 5
 3b8:	29 98       	cbi	0x05, 1	; 5
 3ba:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_master_init>
 3be:	2f ef       	ldi	r18, 0xFF	; 255
 3c0:	81 ee       	ldi	r24, 0xE1	; 225
 3c2:	94 e0       	ldi	r25, 0x04	; 4
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <nrf24_init+0x30>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <nrf24_init+0x3a>
 3ce:	00 00       	nop
 3d0:	0f e3       	ldi	r16, 0x3F	; 63
 3d2:	00 93 81 02 	sts	0x0281, r16	; 0x800281 <data>
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	61 e8       	ldi	r22, 0x81	; 129
 3dc:	72 e0       	ldi	r23, 0x02	; 2
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 3e4:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <data>
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	61 e8       	ldi	r22, 0x81	; 129
 3ee:	72 e0       	ldi	r23, 0x02	; 2
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 3f6:	80 ef       	ldi	r24, 0xF0	; 240
 3f8:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	61 e8       	ldi	r22, 0x81	; 129
 402:	72 e0       	ldi	r23, 0x02	; 2
 404:	84 e0       	ldi	r24, 0x04	; 4
 406:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 40a:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <data>
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	61 e8       	ldi	r22, 0x81	; 129
 414:	72 e0       	ldi	r23, 0x02	; 2
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 41c:	84 e7       	ldi	r24, 0x74	; 116
 41e:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	61 e8       	ldi	r22, 0x81	; 129
 428:	72 e0       	ldi	r23, 0x02	; 2
 42a:	85 e0       	ldi	r24, 0x05	; 5
 42c:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 430:	8e e0       	ldi	r24, 0x0E	; 14
 432:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	61 e8       	ldi	r22, 0x81	; 129
 43c:	72 e0       	ldi	r23, 0x02	; 2
 43e:	86 e0       	ldi	r24, 0x06	; 6
 440:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 444:	10 e7       	ldi	r17, 0x70	; 112
 446:	10 93 81 02 	sts	0x0281, r17	; 0x800281 <data>
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	61 e8       	ldi	r22, 0x81	; 129
 450:	72 e0       	ldi	r23, 0x02	; 2
 452:	87 e0       	ldi	r24, 0x07	; 7
 454:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 458:	00 93 81 02 	sts	0x0281, r16	; 0x800281 <data>
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	61 e8       	ldi	r22, 0x81	; 129
 462:	72 e0       	ldi	r23, 0x02	; 2
 464:	8c e1       	ldi	r24, 0x1C	; 28
 466:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 46a:	84 e0       	ldi	r24, 0x04	; 4
 46c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	61 e8       	ldi	r22, 0x81	; 129
 476:	72 e0       	ldi	r23, 0x02	; 2
 478:	8d e1       	ldi	r24, 0x1D	; 29
 47a:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 47e:	19 83       	std	Y+1, r17	; 0x01
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	82 ee       	ldi	r24, 0xE2	; 226
 48a:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	81 ee       	ldi	r24, 0xE1	; 225
 498:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 49c:	45 e0       	ldi	r20, 0x05	; 5
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	65 e0       	ldi	r22, 0x05	; 5
 4a2:	71 e0       	ldi	r23, 0x01	; 1
 4a4:	8a e0       	ldi	r24, 0x0A	; 10
 4a6:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 4aa:	45 e0       	ldi	r20, 0x05	; 5
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	71 e0       	ldi	r23, 0x01	; 1
 4b2:	80 e1       	ldi	r24, 0x10	; 16
 4b4:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	be 01       	movw	r22, r28
 4be:	6f 5f       	subi	r22, 0xFF	; 255
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	81 60       	ori	r24, 0x01	; 1
 4cc:	89 83       	std	Y+1, r24	; 0x01
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	be 01       	movw	r22, r28
 4d4:	6f 5f       	subi	r22, 0xFF	; 255
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 4de:	0f 90       	pop	r0
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	08 95       	ret

000004ea <nrf24_state>:
}

void nrf24_state(uint8_t state)
{
 4ea:	1f 93       	push	r17
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	1f 92       	push	r1
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
 4f6:	18 2f       	mov	r17, r24
	uint8_t config_register;
	nrf24_read(CONFIG,&config_register,1);
 4f8:	41 e0       	ldi	r20, 0x01	; 1
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	be 01       	movw	r22, r28
 4fe:	6f 5f       	subi	r22, 0xFF	; 255
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	
	switch (state)
 508:	13 30       	cpi	r17, 0x03	; 3
 50a:	71 f1       	breq	.+92     	; 0x568 <nrf24_state+0x7e>
 50c:	28 f4       	brcc	.+10     	; 0x518 <nrf24_state+0x2e>
 50e:	11 30       	cpi	r17, 0x01	; 1
 510:	59 f0       	breq	.+22     	; 0x528 <nrf24_state+0x3e>
 512:	12 30       	cpi	r17, 0x02	; 2
 514:	e9 f0       	breq	.+58     	; 0x550 <nrf24_state+0x66>
 516:	5e c0       	rjmp	.+188    	; 0x5d4 <nrf24_state+0xea>
 518:	15 30       	cpi	r17, 0x05	; 5
 51a:	09 f4       	brne	.+2      	; 0x51e <nrf24_state+0x34>
 51c:	47 c0       	rjmp	.+142    	; 0x5ac <nrf24_state+0xc2>
 51e:	d0 f1       	brcs	.+116    	; 0x594 <nrf24_state+0xaa>
 520:	16 30       	cpi	r17, 0x06	; 6
 522:	09 f4       	brne	.+2      	; 0x526 <nrf24_state+0x3c>
 524:	45 c0       	rjmp	.+138    	; 0x5b0 <nrf24_state+0xc6>
 526:	56 c0       	rjmp	.+172    	; 0x5d4 <nrf24_state+0xea>
	{
		case POWERUP:
		// Check if already powered up
		if (!(config_register & (1 << PWR_UP)))
 528:	89 81       	ldd	r24, Y+1	; 0x01
 52a:	81 fd       	sbrc	r24, 1
 52c:	53 c0       	rjmp	.+166    	; 0x5d4 <nrf24_state+0xea>
		{
			data = config_register | (1 << PWR_UP);
 52e:	82 60       	ori	r24, 0x02	; 2
 530:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
			nrf24_write(CONFIG,&data,1);
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	61 e8       	ldi	r22, 0x81	; 129
 53a:	72 e0       	ldi	r23, 0x02	; 2
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
 542:	8f e3       	ldi	r24, 0x3F	; 63
 544:	9f e1       	ldi	r25, 0x1F	; 31
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <nrf24_state+0x5c>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <nrf24_state+0x62>
 54c:	00 00       	nop
 54e:	42 c0       	rjmp	.+132    	; 0x5d4 <nrf24_state+0xea>
			// 1.5ms from POWERDOWN to start up
			_delay_ms(2);
		}
		break;
		case POWERDOWN:
		data = config_register & ~(1 << PWR_UP);
 550:	89 81       	ldd	r24, Y+1	; 0x01
 552:	8d 7f       	andi	r24, 0xFD	; 253
 554:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
		nrf24_write(CONFIG,&data,1);
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	61 e8       	ldi	r22, 0x81	; 129
 55e:	72 e0       	ldi	r23, 0x02	; 2
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
		break;
 566:	36 c0       	rjmp	.+108    	; 0x5d4 <nrf24_state+0xea>
		case RECEIVE:
		data = config_register | (1 << PRIM_RX);
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	81 60       	ori	r24, 0x01	; 1
 56c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
		nrf24_write(CONFIG,&data,1);
 570:	41 e0       	ldi	r20, 0x01	; 1
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	61 e8       	ldi	r22, 0x81	; 129
 576:	72 e0       	ldi	r23, 0x02	; 2
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
		// Clear STATUS register
		data = (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
 57e:	80 e7       	ldi	r24, 0x70	; 112
 580:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
		nrf24_write(STATUS,&data,1);
 584:	41 e0       	ldi	r20, 0x01	; 1
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	61 e8       	ldi	r22, 0x81	; 129
 58a:	72 e0       	ldi	r23, 0x02	; 2
 58c:	87 e0       	ldi	r24, 0x07	; 7
 58e:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
		break;
 592:	20 c0       	rjmp	.+64     	; 0x5d4 <nrf24_state+0xea>
		case TRANSMIT:
		data = config_register & ~(1 << PRIM_RX);
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	8e 7f       	andi	r24, 0xFE	; 254
 598:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
		nrf24_write(CONFIG,&data,1);
 59c:	41 e0       	ldi	r20, 0x01	; 1
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	61 e8       	ldi	r22, 0x81	; 129
 5a2:	72 e0       	ldi	r23, 0x02	; 2
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
		break;
 5aa:	14 c0       	rjmp	.+40     	; 0x5d4 <nrf24_state+0xea>
		case STANDBY1:
		ce_low;
 5ac:	29 98       	cbi	0x05, 1	; 5
		break;
 5ae:	12 c0       	rjmp	.+36     	; 0x5d4 <nrf24_state+0xea>
		case STANDBY2:
		data = config_register & ~(1 << PRIM_RX);
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
 5b2:	8e 7f       	andi	r24, 0xFE	; 254
 5b4:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
		nrf24_write(CONFIG,&data,1);
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	61 e8       	ldi	r22, 0x81	; 129
 5be:	72 e0       	ldi	r23, 0x02	; 2
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
		ce_high;
 5c6:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c8:	87 e5       	ldi	r24, 0x57	; 87
 5ca:	92 e0       	ldi	r25, 0x02	; 2
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <nrf24_state+0xe2>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <nrf24_state+0xe8>
 5d2:	00 00       	nop
		_delay_us(150);
		break;
	}
}
 5d4:	0f 90       	pop	r0
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	08 95       	ret

000005de <nrf24_start_listening>:

void nrf24_start_listening(void)
{
	nrf24_state(RECEIVE);				// Receive mode
 5de:	83 e0       	ldi	r24, 0x03	; 3
 5e0:	0e 94 75 02 	call	0x4ea	; 0x4ea <nrf24_state>
	//if (AUTO_ACK) nrf24_write_ack();	// Write acknowledgment
	ce_high;
 5e4:	29 9a       	sbi	0x05, 1	; 5
 5e6:	87 e5       	ldi	r24, 0x57	; 87
 5e8:	92 e0       	ldi	r25, 0x02	; 2
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <nrf24_start_listening+0xc>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <nrf24_start_listening+0x12>
 5f0:	00 00       	nop
 5f2:	08 95       	ret

000005f4 <nrf24_send_message>:
	_delay_us(150);						// Settling time
}

uint8_t nrf24_send_message(const void *tx_message)
{
 5f4:	cf 92       	push	r12
 5f6:	df 92       	push	r13
 5f8:	ef 92       	push	r14
 5fa:	ff 92       	push	r15
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	cd b7       	in	r28, 0x3d	; 61
 606:	de b7       	in	r29, 0x3e	; 62
 608:	a0 97       	sbiw	r28, 0x20	; 32
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	f8 94       	cli
 60e:	de bf       	out	0x3e, r29	; 62
 610:	0f be       	out	0x3f, r0	; 63
 612:	cd bf       	out	0x3d, r28	; 61
 614:	6c 01       	movw	r12, r24
	// For printf();
	char temp[32];
	memset(temp,0,32);
 616:	68 94       	set
 618:	ff 24       	eor	r15, r15
 61a:	f5 f8       	bld	r15, 5
 61c:	ce 01       	movw	r24, r28
 61e:	01 96       	adiw	r24, 0x01	; 1
 620:	fc 01       	movw	r30, r24
 622:	2f 2d       	mov	r18, r15
 624:	11 92       	st	Z+, r1
 626:	2a 95       	dec	r18
 628:	e9 f7       	brne	.-6      	; 0x624 <nrf24_send_message+0x30>
	strcpy(temp,tx_message);
 62a:	b6 01       	movw	r22, r12
 62c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <strcpy>
	
	// Message length
	uint8_t length = strlen(tx_message);
 630:	f6 01       	movw	r30, r12
 632:	01 90       	ld	r0, Z+
 634:	00 20       	and	r0, r0
 636:	e9 f7       	brne	.-6      	; 0x632 <nrf24_send_message+0x3e>
 638:	31 97       	sbiw	r30, 0x01	; 1
 63a:	8f 01       	movw	r16, r30
 63c:	0c 19       	sub	r16, r12
 63e:	1d 09       	sbc	r17, r13

	// Transmit mode
	nrf24_state(TRANSMIT);
 640:	84 e0       	ldi	r24, 0x04	; 4
 642:	0e 94 75 02 	call	0x4ea	; 0x4ea <nrf24_state>

	// Flush TX/RX and clear TX interrupt
	nrf24_write(FLUSH_RX,0,0);
 646:	40 e0       	ldi	r20, 0x00	; 0
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	82 ee       	ldi	r24, 0xE2	; 226
 650:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
	nrf24_write(FLUSH_TX,0,0);
 654:	40 e0       	ldi	r20, 0x00	; 0
 656:	50 e0       	ldi	r21, 0x00	; 0
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	81 ee       	ldi	r24, 0xE1	; 225
 65e:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
	data = (1 << TX_DS);
 662:	f0 92 81 02 	sts	0x0281, r15	; 0x800281 <data>
	nrf24_write(STATUS,&data,1);
 666:	41 e0       	ldi	r20, 0x01	; 1
 668:	50 e0       	ldi	r21, 0x00	; 0
 66a:	61 e8       	ldi	r22, 0x81	; 129
 66c:	72 e0       	ldi	r23, 0x02	; 2
 66e:	87 e0       	ldi	r24, 0x07	; 7
 670:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
	
	// Disable interrupt on RX
	nrf24_read(CONFIG,&data,1);
 674:	41 e0       	ldi	r20, 0x01	; 1
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	61 e8       	ldi	r22, 0x81	; 129
 67a:	72 e0       	ldi	r23, 0x02	; 2
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	data |= (1 << MASK_RX_DR);
 682:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <data>
 686:	80 64       	ori	r24, 0x40	; 64
 688:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
	nrf24_write(CONFIG,&data,1);
 68c:	41 e0       	ldi	r20, 0x01	; 1
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	61 e8       	ldi	r22, 0x81	; 129
 692:	72 e0       	ldi	r23, 0x02	; 2
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
	
	// Start SPI, load message into TX_PAYLOAD
	csn_low;
 69a:	2a 98       	cbi	0x05, 2	; 5
	if (AUTO_ACK) spi_send(W_TX_PAYLOAD);
	else spi_send(W_TX_PAYLOAD_NOACK);
 69c:	80 eb       	ldi	r24, 0xB0	; 176
 69e:	0e 94 c1 03 	call	0x782	; 0x782 <spi_send>
	while (length--) spi_send(*(uint8_t *)tx_message++);
 6a2:	ef ef       	ldi	r30, 0xFF	; 255
 6a4:	e0 0f       	add	r30, r16
 6a6:	00 23       	and	r16, r16
 6a8:	81 f0       	breq	.+32     	; 0x6ca <nrf24_send_message+0xd6>
 6aa:	86 01       	movw	r16, r12
 6ac:	ee 2e       	mov	r14, r30
 6ae:	f1 2c       	mov	r15, r1
 6b0:	f7 01       	movw	r30, r14
 6b2:	31 96       	adiw	r30, 0x01	; 1
 6b4:	76 01       	movw	r14, r12
 6b6:	ee 0e       	add	r14, r30
 6b8:	ff 1e       	adc	r15, r31
 6ba:	f8 01       	movw	r30, r16
 6bc:	81 91       	ld	r24, Z+
 6be:	8f 01       	movw	r16, r30
 6c0:	0e 94 c1 03 	call	0x782	; 0x782 <spi_send>
 6c4:	0e 15       	cp	r16, r14
 6c6:	1f 05       	cpc	r17, r15
 6c8:	c1 f7       	brne	.-16     	; 0x6ba <nrf24_send_message+0xc6>
	spi_send(0);
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	0e 94 c1 03 	call	0x782	; 0x782 <spi_send>
	csn_high;
 6d0:	2a 9a       	sbi	0x05, 2	; 5
	
	// Send message by pulling CE high for more than 10us
	ce_high;
 6d2:	29 9a       	sbi	0x05, 1	; 5
 6d4:	f0 e5       	ldi	r31, 0x50	; 80
 6d6:	fa 95       	dec	r31
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <nrf24_send_message+0xe2>
	_delay_us(15);
	ce_low;
 6da:	29 98       	cbi	0x05, 1	; 5
	
	// Wait for message to be sent (TX_DS flag raised)
	nrf24_read(STATUS,&data,1);
 6dc:	41 e0       	ldi	r20, 0x01	; 1
 6de:	50 e0       	ldi	r21, 0x00	; 0
 6e0:	61 e8       	ldi	r22, 0x81	; 129
 6e2:	72 e0       	ldi	r23, 0x02	; 2
 6e4:	87 e0       	ldi	r24, 0x07	; 7
 6e6:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	while(!(data & (1 << TX_DS))) nrf24_read(STATUS,&data,1);
 6ea:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <data>
 6ee:	85 fd       	sbrc	r24, 5
 6f0:	0b c0       	rjmp	.+22     	; 0x708 <nrf24_send_message+0x114>
 6f2:	41 e0       	ldi	r20, 0x01	; 1
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	61 e8       	ldi	r22, 0x81	; 129
 6f8:	72 e0       	ldi	r23, 0x02	; 2
 6fa:	87 e0       	ldi	r24, 0x07	; 7
 6fc:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
 700:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <data>
 704:	85 ff       	sbrs	r24, 5
 706:	f5 cf       	rjmp	.-22     	; 0x6f2 <nrf24_send_message+0xfe>
	printf("Message sent: %s\n",temp);
 708:	ce 01       	movw	r24, r28
 70a:	01 96       	adiw	r24, 0x01	; 1
 70c:	9f 93       	push	r25
 70e:	8f 93       	push	r24
 710:	84 e6       	ldi	r24, 0x64	; 100
 712:	92 e0       	ldi	r25, 0x02	; 2
 714:	9f 93       	push	r25
 716:	8f 93       	push	r24
 718:	0e 94 01 04 	call	0x802	; 0x802 <printf>
	
	// Enable interrupt on RX
	nrf24_read(CONFIG,&data,1);
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	50 e0       	ldi	r21, 0x00	; 0
 720:	61 e8       	ldi	r22, 0x81	; 129
 722:	72 e0       	ldi	r23, 0x02	; 2
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_read>
	data &= ~(1 << MASK_RX_DR);
 72a:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <data>
 72e:	8f 7b       	andi	r24, 0xBF	; 191
 730:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <data>
	nrf24_write(CONFIG,&data,1);
 734:	41 e0       	ldi	r20, 0x01	; 1
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	61 e8       	ldi	r22, 0x81	; 129
 73a:	72 e0       	ldi	r23, 0x02	; 2
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_write>
	
	// Continue listening
	nrf24_start_listening();
 742:	0e 94 ef 02 	call	0x5de	; 0x5de <nrf24_start_listening>
	
	return 1;
 746:	0f 90       	pop	r0
 748:	0f 90       	pop	r0
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
}
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	a0 96       	adiw	r28, 0x20	; 32
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	f8 94       	cli
 756:	de bf       	out	0x3e, r29	; 62
 758:	0f be       	out	0x3f, r0	; 63
 75a:	cd bf       	out	0x3d, r28	; 61
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	1f 91       	pop	r17
 762:	0f 91       	pop	r16
 764:	ff 90       	pop	r15
 766:	ef 90       	pop	r14
 768:	df 90       	pop	r13
 76a:	cf 90       	pop	r12
 76c:	08 95       	ret

0000076e <spi_master_init>:
 76e:	24 98       	cbi	0x04, 4	; 4
 770:	84 b1       	in	r24, 0x04	; 4
 772:	88 62       	ori	r24, 0x28	; 40
 774:	84 b9       	out	0x04, r24	; 4
 776:	80 e5       	ldi	r24, 0x50	; 80
 778:	8c bd       	out	0x2c, r24	; 44
 77a:	8d b5       	in	r24, 0x2d	; 45
 77c:	81 60       	ori	r24, 0x01	; 1
 77e:	8d bd       	out	0x2d, r24	; 45
 780:	08 95       	ret

00000782 <spi_send>:
 782:	8e bd       	out	0x2e, r24	; 46
 784:	0d b4       	in	r0, 0x2d	; 45
 786:	07 fe       	sbrs	r0, 7
 788:	fd cf       	rjmp	.-6      	; 0x784 <spi_send+0x2>
 78a:	08 95       	ret

0000078c <spi_exchange>:
 78c:	8e bd       	out	0x2e, r24	; 46
 78e:	0d b4       	in	r0, 0x2d	; 45
 790:	07 fe       	sbrs	r0, 7
 792:	fd cf       	rjmp	.-6      	; 0x78e <spi_exchange+0x2>
 794:	8e b5       	in	r24, 0x2e	; 46
 796:	08 95       	ret

00000798 <uart_putchar>:
 798:	cf 93       	push	r28
 79a:	c8 2f       	mov	r28, r24
 79c:	8a 30       	cpi	r24, 0x0A	; 10
 79e:	19 f4       	brne	.+6      	; 0x7a6 <uart_putchar+0xe>
 7a0:	8d e0       	ldi	r24, 0x0D	; 13
 7a2:	0e 94 cc 03 	call	0x798	; 0x798 <uart_putchar>
 7a6:	e0 ec       	ldi	r30, 0xC0	; 192
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	85 ff       	sbrs	r24, 5
 7ae:	fd cf       	rjmp	.-6      	; 0x7aa <uart_putchar+0x12>
 7b0:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	cf 91       	pop	r28
 7ba:	08 95       	ret

000007bc <uart_getchar>:
 7bc:	e0 ec       	ldi	r30, 0xC0	; 192
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	88 23       	and	r24, r24
 7c4:	ec f7       	brge	.-6      	; 0x7c0 <uart_getchar+0x4>
 7c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	08 95       	ret

000007ce <uart_init>:
 7ce:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 7d2:	87 e6       	ldi	r24, 0x67	; 103
 7d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 7d8:	88 e1       	ldi	r24, 0x18	; 24
 7da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 7de:	e2 e8       	ldi	r30, 0x82	; 130
 7e0:	f2 e0       	ldi	r31, 0x02	; 2
 7e2:	88 e1       	ldi	r24, 0x18	; 24
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	93 83       	std	Z+3, r25	; 0x03
 7e8:	82 83       	std	Z+2, r24	; 0x02
 7ea:	8a e0       	ldi	r24, 0x0A	; 10
 7ec:	91 e0       	ldi	r25, 0x01	; 1
 7ee:	91 83       	std	Z+1, r25	; 0x01
 7f0:	80 83       	st	Z, r24
 7f2:	08 95       	ret

000007f4 <strcpy>:
 7f4:	fb 01       	movw	r30, r22
 7f6:	dc 01       	movw	r26, r24
 7f8:	01 90       	ld	r0, Z+
 7fa:	0d 92       	st	X+, r0
 7fc:	00 20       	and	r0, r0
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <strcpy+0x4>
 800:	08 95       	ret

00000802 <printf>:
 802:	a0 e0       	ldi	r26, 0x00	; 0
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	e7 e0       	ldi	r30, 0x07	; 7
 808:	f4 e0       	ldi	r31, 0x04	; 4
 80a:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__prologue_saves__+0x20>
 80e:	ae 01       	movw	r20, r28
 810:	4b 5f       	subi	r20, 0xFB	; 251
 812:	5f 4f       	sbci	r21, 0xFF	; 255
 814:	fa 01       	movw	r30, r20
 816:	61 91       	ld	r22, Z+
 818:	71 91       	ld	r23, Z+
 81a:	af 01       	movw	r20, r30
 81c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__iob+0x2>
 820:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <__iob+0x3>
 824:	0e 94 69 04 	call	0x8d2	; 0x8d2 <vfprintf>
 828:	e2 e0       	ldi	r30, 0x02	; 2
 82a:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__epilogue_restores__+0x20>

0000082e <puts>:
 82e:	0f 93       	push	r16
 830:	1f 93       	push	r17
 832:	cf 93       	push	r28
 834:	df 93       	push	r29
 836:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <__iob+0x2>
 83a:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <__iob+0x3>
 83e:	23 81       	ldd	r18, Z+3	; 0x03
 840:	21 ff       	sbrs	r18, 1
 842:	1b c0       	rjmp	.+54     	; 0x87a <puts+0x4c>
 844:	8c 01       	movw	r16, r24
 846:	d0 e0       	ldi	r29, 0x00	; 0
 848:	c0 e0       	ldi	r28, 0x00	; 0
 84a:	f8 01       	movw	r30, r16
 84c:	81 91       	ld	r24, Z+
 84e:	8f 01       	movw	r16, r30
 850:	60 91 84 02 	lds	r22, 0x0284	; 0x800284 <__iob+0x2>
 854:	70 91 85 02 	lds	r23, 0x0285	; 0x800285 <__iob+0x3>
 858:	db 01       	movw	r26, r22
 85a:	18 96       	adiw	r26, 0x08	; 8
 85c:	ed 91       	ld	r30, X+
 85e:	fc 91       	ld	r31, X
 860:	19 97       	sbiw	r26, 0x09	; 9
 862:	88 23       	and	r24, r24
 864:	31 f0       	breq	.+12     	; 0x872 <puts+0x44>
 866:	09 95       	icall
 868:	89 2b       	or	r24, r25
 86a:	79 f3       	breq	.-34     	; 0x84a <puts+0x1c>
 86c:	df ef       	ldi	r29, 0xFF	; 255
 86e:	cf ef       	ldi	r28, 0xFF	; 255
 870:	ec cf       	rjmp	.-40     	; 0x84a <puts+0x1c>
 872:	8a e0       	ldi	r24, 0x0A	; 10
 874:	09 95       	icall
 876:	89 2b       	or	r24, r25
 878:	19 f0       	breq	.+6      	; 0x880 <puts+0x52>
 87a:	8f ef       	ldi	r24, 0xFF	; 255
 87c:	9f ef       	ldi	r25, 0xFF	; 255
 87e:	02 c0       	rjmp	.+4      	; 0x884 <puts+0x56>
 880:	8d 2f       	mov	r24, r29
 882:	9c 2f       	mov	r25, r28
 884:	df 91       	pop	r29
 886:	cf 91       	pop	r28
 888:	1f 91       	pop	r17
 88a:	0f 91       	pop	r16
 88c:	08 95       	ret

0000088e <sprintf>:
 88e:	ae e0       	ldi	r26, 0x0E	; 14
 890:	b0 e0       	ldi	r27, 0x00	; 0
 892:	ed e4       	ldi	r30, 0x4D	; 77
 894:	f4 e0       	ldi	r31, 0x04	; 4
 896:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__prologue_saves__+0x1c>
 89a:	0d 89       	ldd	r16, Y+21	; 0x15
 89c:	1e 89       	ldd	r17, Y+22	; 0x16
 89e:	86 e0       	ldi	r24, 0x06	; 6
 8a0:	8c 83       	std	Y+4, r24	; 0x04
 8a2:	1a 83       	std	Y+2, r17	; 0x02
 8a4:	09 83       	std	Y+1, r16	; 0x01
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	9f e7       	ldi	r25, 0x7F	; 127
 8aa:	9e 83       	std	Y+6, r25	; 0x06
 8ac:	8d 83       	std	Y+5, r24	; 0x05
 8ae:	ae 01       	movw	r20, r28
 8b0:	47 5e       	subi	r20, 0xE7	; 231
 8b2:	5f 4f       	sbci	r21, 0xFF	; 255
 8b4:	6f 89       	ldd	r22, Y+23	; 0x17
 8b6:	78 8d       	ldd	r23, Y+24	; 0x18
 8b8:	ce 01       	movw	r24, r28
 8ba:	01 96       	adiw	r24, 0x01	; 1
 8bc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <vfprintf>
 8c0:	ef 81       	ldd	r30, Y+7	; 0x07
 8c2:	f8 85       	ldd	r31, Y+8	; 0x08
 8c4:	e0 0f       	add	r30, r16
 8c6:	f1 1f       	adc	r31, r17
 8c8:	10 82       	st	Z, r1
 8ca:	2e 96       	adiw	r28, 0x0e	; 14
 8cc:	e4 e0       	ldi	r30, 0x04	; 4
 8ce:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__epilogue_restores__+0x1c>

000008d2 <vfprintf>:
 8d2:	ab e0       	ldi	r26, 0x0B	; 11
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	ef e6       	ldi	r30, 0x6F	; 111
 8d8:	f4 e0       	ldi	r31, 0x04	; 4
 8da:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__prologue_saves__>
 8de:	6c 01       	movw	r12, r24
 8e0:	7b 01       	movw	r14, r22
 8e2:	8a 01       	movw	r16, r20
 8e4:	fc 01       	movw	r30, r24
 8e6:	17 82       	std	Z+7, r1	; 0x07
 8e8:	16 82       	std	Z+6, r1	; 0x06
 8ea:	83 81       	ldd	r24, Z+3	; 0x03
 8ec:	81 ff       	sbrs	r24, 1
 8ee:	cc c1       	rjmp	.+920    	; 0xc88 <__stack+0x389>
 8f0:	ce 01       	movw	r24, r28
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	3c 01       	movw	r6, r24
 8f6:	f6 01       	movw	r30, r12
 8f8:	93 81       	ldd	r25, Z+3	; 0x03
 8fa:	f7 01       	movw	r30, r14
 8fc:	93 fd       	sbrc	r25, 3
 8fe:	85 91       	lpm	r24, Z+
 900:	93 ff       	sbrs	r25, 3
 902:	81 91       	ld	r24, Z+
 904:	7f 01       	movw	r14, r30
 906:	88 23       	and	r24, r24
 908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xd>
 90a:	ba c1       	rjmp	.+884    	; 0xc80 <__stack+0x381>
 90c:	85 32       	cpi	r24, 0x25	; 37
 90e:	39 f4       	brne	.+14     	; 0x91e <__stack+0x1f>
 910:	93 fd       	sbrc	r25, 3
 912:	85 91       	lpm	r24, Z+
 914:	93 ff       	sbrs	r25, 3
 916:	81 91       	ld	r24, Z+
 918:	7f 01       	movw	r14, r30
 91a:	85 32       	cpi	r24, 0x25	; 37
 91c:	29 f4       	brne	.+10     	; 0x928 <__stack+0x29>
 91e:	b6 01       	movw	r22, r12
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 926:	e7 cf       	rjmp	.-50     	; 0x8f6 <vfprintf+0x24>
 928:	91 2c       	mov	r9, r1
 92a:	21 2c       	mov	r2, r1
 92c:	31 2c       	mov	r3, r1
 92e:	ff e1       	ldi	r31, 0x1F	; 31
 930:	f3 15       	cp	r31, r3
 932:	d8 f0       	brcs	.+54     	; 0x96a <__stack+0x6b>
 934:	8b 32       	cpi	r24, 0x2B	; 43
 936:	79 f0       	breq	.+30     	; 0x956 <__stack+0x57>
 938:	38 f4       	brcc	.+14     	; 0x948 <__stack+0x49>
 93a:	80 32       	cpi	r24, 0x20	; 32
 93c:	79 f0       	breq	.+30     	; 0x95c <__stack+0x5d>
 93e:	83 32       	cpi	r24, 0x23	; 35
 940:	a1 f4       	brne	.+40     	; 0x96a <__stack+0x6b>
 942:	23 2d       	mov	r18, r3
 944:	20 61       	ori	r18, 0x10	; 16
 946:	1d c0       	rjmp	.+58     	; 0x982 <__stack+0x83>
 948:	8d 32       	cpi	r24, 0x2D	; 45
 94a:	61 f0       	breq	.+24     	; 0x964 <__stack+0x65>
 94c:	80 33       	cpi	r24, 0x30	; 48
 94e:	69 f4       	brne	.+26     	; 0x96a <__stack+0x6b>
 950:	23 2d       	mov	r18, r3
 952:	21 60       	ori	r18, 0x01	; 1
 954:	16 c0       	rjmp	.+44     	; 0x982 <__stack+0x83>
 956:	83 2d       	mov	r24, r3
 958:	82 60       	ori	r24, 0x02	; 2
 95a:	38 2e       	mov	r3, r24
 95c:	e3 2d       	mov	r30, r3
 95e:	e4 60       	ori	r30, 0x04	; 4
 960:	3e 2e       	mov	r3, r30
 962:	2a c0       	rjmp	.+84     	; 0x9b8 <__stack+0xb9>
 964:	f3 2d       	mov	r31, r3
 966:	f8 60       	ori	r31, 0x08	; 8
 968:	1d c0       	rjmp	.+58     	; 0x9a4 <__stack+0xa5>
 96a:	37 fc       	sbrc	r3, 7
 96c:	2d c0       	rjmp	.+90     	; 0x9c8 <__stack+0xc9>
 96e:	20 ed       	ldi	r18, 0xD0	; 208
 970:	28 0f       	add	r18, r24
 972:	2a 30       	cpi	r18, 0x0A	; 10
 974:	40 f0       	brcs	.+16     	; 0x986 <__stack+0x87>
 976:	8e 32       	cpi	r24, 0x2E	; 46
 978:	b9 f4       	brne	.+46     	; 0x9a8 <__stack+0xa9>
 97a:	36 fc       	sbrc	r3, 6
 97c:	81 c1       	rjmp	.+770    	; 0xc80 <__stack+0x381>
 97e:	23 2d       	mov	r18, r3
 980:	20 64       	ori	r18, 0x40	; 64
 982:	32 2e       	mov	r3, r18
 984:	19 c0       	rjmp	.+50     	; 0x9b8 <__stack+0xb9>
 986:	36 fe       	sbrs	r3, 6
 988:	06 c0       	rjmp	.+12     	; 0x996 <__stack+0x97>
 98a:	8a e0       	ldi	r24, 0x0A	; 10
 98c:	98 9e       	mul	r9, r24
 98e:	20 0d       	add	r18, r0
 990:	11 24       	eor	r1, r1
 992:	92 2e       	mov	r9, r18
 994:	11 c0       	rjmp	.+34     	; 0x9b8 <__stack+0xb9>
 996:	ea e0       	ldi	r30, 0x0A	; 10
 998:	2e 9e       	mul	r2, r30
 99a:	20 0d       	add	r18, r0
 99c:	11 24       	eor	r1, r1
 99e:	22 2e       	mov	r2, r18
 9a0:	f3 2d       	mov	r31, r3
 9a2:	f0 62       	ori	r31, 0x20	; 32
 9a4:	3f 2e       	mov	r3, r31
 9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <__stack+0xb9>
 9a8:	8c 36       	cpi	r24, 0x6C	; 108
 9aa:	21 f4       	brne	.+8      	; 0x9b4 <__stack+0xb5>
 9ac:	83 2d       	mov	r24, r3
 9ae:	80 68       	ori	r24, 0x80	; 128
 9b0:	38 2e       	mov	r3, r24
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <__stack+0xb9>
 9b4:	88 36       	cpi	r24, 0x68	; 104
 9b6:	41 f4       	brne	.+16     	; 0x9c8 <__stack+0xc9>
 9b8:	f7 01       	movw	r30, r14
 9ba:	93 fd       	sbrc	r25, 3
 9bc:	85 91       	lpm	r24, Z+
 9be:	93 ff       	sbrs	r25, 3
 9c0:	81 91       	ld	r24, Z+
 9c2:	7f 01       	movw	r14, r30
 9c4:	81 11       	cpse	r24, r1
 9c6:	b3 cf       	rjmp	.-154    	; 0x92e <__stack+0x2f>
 9c8:	98 2f       	mov	r25, r24
 9ca:	9f 7d       	andi	r25, 0xDF	; 223
 9cc:	95 54       	subi	r25, 0x45	; 69
 9ce:	93 30       	cpi	r25, 0x03	; 3
 9d0:	28 f4       	brcc	.+10     	; 0x9dc <__stack+0xdd>
 9d2:	0c 5f       	subi	r16, 0xFC	; 252
 9d4:	1f 4f       	sbci	r17, 0xFF	; 255
 9d6:	9f e3       	ldi	r25, 0x3F	; 63
 9d8:	99 83       	std	Y+1, r25	; 0x01
 9da:	0d c0       	rjmp	.+26     	; 0x9f6 <__stack+0xf7>
 9dc:	83 36       	cpi	r24, 0x63	; 99
 9de:	31 f0       	breq	.+12     	; 0x9ec <__stack+0xed>
 9e0:	83 37       	cpi	r24, 0x73	; 115
 9e2:	71 f0       	breq	.+28     	; 0xa00 <__stack+0x101>
 9e4:	83 35       	cpi	r24, 0x53	; 83
 9e6:	09 f0       	breq	.+2      	; 0x9ea <__stack+0xeb>
 9e8:	59 c0       	rjmp	.+178    	; 0xa9c <__stack+0x19d>
 9ea:	21 c0       	rjmp	.+66     	; 0xa2e <__stack+0x12f>
 9ec:	f8 01       	movw	r30, r16
 9ee:	80 81       	ld	r24, Z
 9f0:	89 83       	std	Y+1, r24	; 0x01
 9f2:	0e 5f       	subi	r16, 0xFE	; 254
 9f4:	1f 4f       	sbci	r17, 0xFF	; 255
 9f6:	88 24       	eor	r8, r8
 9f8:	83 94       	inc	r8
 9fa:	91 2c       	mov	r9, r1
 9fc:	53 01       	movw	r10, r6
 9fe:	13 c0       	rjmp	.+38     	; 0xa26 <__stack+0x127>
 a00:	28 01       	movw	r4, r16
 a02:	f2 e0       	ldi	r31, 0x02	; 2
 a04:	4f 0e       	add	r4, r31
 a06:	51 1c       	adc	r5, r1
 a08:	f8 01       	movw	r30, r16
 a0a:	a0 80       	ld	r10, Z
 a0c:	b1 80       	ldd	r11, Z+1	; 0x01
 a0e:	36 fe       	sbrs	r3, 6
 a10:	03 c0       	rjmp	.+6      	; 0xa18 <__stack+0x119>
 a12:	69 2d       	mov	r22, r9
 a14:	70 e0       	ldi	r23, 0x00	; 0
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <__stack+0x11d>
 a18:	6f ef       	ldi	r22, 0xFF	; 255
 a1a:	7f ef       	ldi	r23, 0xFF	; 255
 a1c:	c5 01       	movw	r24, r10
 a1e:	0e 94 55 06 	call	0xcaa	; 0xcaa <strnlen>
 a22:	4c 01       	movw	r8, r24
 a24:	82 01       	movw	r16, r4
 a26:	f3 2d       	mov	r31, r3
 a28:	ff 77       	andi	r31, 0x7F	; 127
 a2a:	3f 2e       	mov	r3, r31
 a2c:	16 c0       	rjmp	.+44     	; 0xa5a <__stack+0x15b>
 a2e:	28 01       	movw	r4, r16
 a30:	22 e0       	ldi	r18, 0x02	; 2
 a32:	42 0e       	add	r4, r18
 a34:	51 1c       	adc	r5, r1
 a36:	f8 01       	movw	r30, r16
 a38:	a0 80       	ld	r10, Z
 a3a:	b1 80       	ldd	r11, Z+1	; 0x01
 a3c:	36 fe       	sbrs	r3, 6
 a3e:	03 c0       	rjmp	.+6      	; 0xa46 <__stack+0x147>
 a40:	69 2d       	mov	r22, r9
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <__stack+0x14b>
 a46:	6f ef       	ldi	r22, 0xFF	; 255
 a48:	7f ef       	ldi	r23, 0xFF	; 255
 a4a:	c5 01       	movw	r24, r10
 a4c:	0e 94 4a 06 	call	0xc94	; 0xc94 <strnlen_P>
 a50:	4c 01       	movw	r8, r24
 a52:	f3 2d       	mov	r31, r3
 a54:	f0 68       	ori	r31, 0x80	; 128
 a56:	3f 2e       	mov	r3, r31
 a58:	82 01       	movw	r16, r4
 a5a:	33 fc       	sbrc	r3, 3
 a5c:	1b c0       	rjmp	.+54     	; 0xa94 <__stack+0x195>
 a5e:	82 2d       	mov	r24, r2
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	88 16       	cp	r8, r24
 a64:	99 06       	cpc	r9, r25
 a66:	b0 f4       	brcc	.+44     	; 0xa94 <__stack+0x195>
 a68:	b6 01       	movw	r22, r12
 a6a:	80 e2       	ldi	r24, 0x20	; 32
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 a72:	2a 94       	dec	r2
 a74:	f4 cf       	rjmp	.-24     	; 0xa5e <__stack+0x15f>
 a76:	f5 01       	movw	r30, r10
 a78:	37 fc       	sbrc	r3, 7
 a7a:	85 91       	lpm	r24, Z+
 a7c:	37 fe       	sbrs	r3, 7
 a7e:	81 91       	ld	r24, Z+
 a80:	5f 01       	movw	r10, r30
 a82:	b6 01       	movw	r22, r12
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 a8a:	21 10       	cpse	r2, r1
 a8c:	2a 94       	dec	r2
 a8e:	21 e0       	ldi	r18, 0x01	; 1
 a90:	82 1a       	sub	r8, r18
 a92:	91 08       	sbc	r9, r1
 a94:	81 14       	cp	r8, r1
 a96:	91 04       	cpc	r9, r1
 a98:	71 f7       	brne	.-36     	; 0xa76 <__stack+0x177>
 a9a:	e8 c0       	rjmp	.+464    	; 0xc6c <__stack+0x36d>
 a9c:	84 36       	cpi	r24, 0x64	; 100
 a9e:	11 f0       	breq	.+4      	; 0xaa4 <__stack+0x1a5>
 aa0:	89 36       	cpi	r24, 0x69	; 105
 aa2:	41 f5       	brne	.+80     	; 0xaf4 <__stack+0x1f5>
 aa4:	f8 01       	movw	r30, r16
 aa6:	37 fe       	sbrs	r3, 7
 aa8:	07 c0       	rjmp	.+14     	; 0xab8 <__stack+0x1b9>
 aaa:	60 81       	ld	r22, Z
 aac:	71 81       	ldd	r23, Z+1	; 0x01
 aae:	82 81       	ldd	r24, Z+2	; 0x02
 ab0:	93 81       	ldd	r25, Z+3	; 0x03
 ab2:	0c 5f       	subi	r16, 0xFC	; 252
 ab4:	1f 4f       	sbci	r17, 0xFF	; 255
 ab6:	08 c0       	rjmp	.+16     	; 0xac8 <__stack+0x1c9>
 ab8:	60 81       	ld	r22, Z
 aba:	71 81       	ldd	r23, Z+1	; 0x01
 abc:	07 2e       	mov	r0, r23
 abe:	00 0c       	add	r0, r0
 ac0:	88 0b       	sbc	r24, r24
 ac2:	99 0b       	sbc	r25, r25
 ac4:	0e 5f       	subi	r16, 0xFE	; 254
 ac6:	1f 4f       	sbci	r17, 0xFF	; 255
 ac8:	f3 2d       	mov	r31, r3
 aca:	ff 76       	andi	r31, 0x6F	; 111
 acc:	3f 2e       	mov	r3, r31
 ace:	97 ff       	sbrs	r25, 7
 ad0:	09 c0       	rjmp	.+18     	; 0xae4 <__stack+0x1e5>
 ad2:	90 95       	com	r25
 ad4:	80 95       	com	r24
 ad6:	70 95       	com	r23
 ad8:	61 95       	neg	r22
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	f0 68       	ori	r31, 0x80	; 128
 ae2:	3f 2e       	mov	r3, r31
 ae4:	2a e0       	ldi	r18, 0x0A	; 10
 ae6:	30 e0       	ldi	r19, 0x00	; 0
 ae8:	a3 01       	movw	r20, r6
 aea:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ultoa_invert>
 aee:	88 2e       	mov	r8, r24
 af0:	86 18       	sub	r8, r6
 af2:	45 c0       	rjmp	.+138    	; 0xb7e <__stack+0x27f>
 af4:	85 37       	cpi	r24, 0x75	; 117
 af6:	31 f4       	brne	.+12     	; 0xb04 <__stack+0x205>
 af8:	23 2d       	mov	r18, r3
 afa:	2f 7e       	andi	r18, 0xEF	; 239
 afc:	b2 2e       	mov	r11, r18
 afe:	2a e0       	ldi	r18, 0x0A	; 10
 b00:	30 e0       	ldi	r19, 0x00	; 0
 b02:	25 c0       	rjmp	.+74     	; 0xb4e <__stack+0x24f>
 b04:	93 2d       	mov	r25, r3
 b06:	99 7f       	andi	r25, 0xF9	; 249
 b08:	b9 2e       	mov	r11, r25
 b0a:	8f 36       	cpi	r24, 0x6F	; 111
 b0c:	c1 f0       	breq	.+48     	; 0xb3e <__stack+0x23f>
 b0e:	18 f4       	brcc	.+6      	; 0xb16 <__stack+0x217>
 b10:	88 35       	cpi	r24, 0x58	; 88
 b12:	79 f0       	breq	.+30     	; 0xb32 <__stack+0x233>
 b14:	b5 c0       	rjmp	.+362    	; 0xc80 <__stack+0x381>
 b16:	80 37       	cpi	r24, 0x70	; 112
 b18:	19 f0       	breq	.+6      	; 0xb20 <__stack+0x221>
 b1a:	88 37       	cpi	r24, 0x78	; 120
 b1c:	21 f0       	breq	.+8      	; 0xb26 <__stack+0x227>
 b1e:	b0 c0       	rjmp	.+352    	; 0xc80 <__stack+0x381>
 b20:	e9 2f       	mov	r30, r25
 b22:	e0 61       	ori	r30, 0x10	; 16
 b24:	be 2e       	mov	r11, r30
 b26:	b4 fe       	sbrs	r11, 4
 b28:	0d c0       	rjmp	.+26     	; 0xb44 <__stack+0x245>
 b2a:	fb 2d       	mov	r31, r11
 b2c:	f4 60       	ori	r31, 0x04	; 4
 b2e:	bf 2e       	mov	r11, r31
 b30:	09 c0       	rjmp	.+18     	; 0xb44 <__stack+0x245>
 b32:	34 fe       	sbrs	r3, 4
 b34:	0a c0       	rjmp	.+20     	; 0xb4a <__stack+0x24b>
 b36:	29 2f       	mov	r18, r25
 b38:	26 60       	ori	r18, 0x06	; 6
 b3a:	b2 2e       	mov	r11, r18
 b3c:	06 c0       	rjmp	.+12     	; 0xb4a <__stack+0x24b>
 b3e:	28 e0       	ldi	r18, 0x08	; 8
 b40:	30 e0       	ldi	r19, 0x00	; 0
 b42:	05 c0       	rjmp	.+10     	; 0xb4e <__stack+0x24f>
 b44:	20 e1       	ldi	r18, 0x10	; 16
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <__stack+0x24f>
 b4a:	20 e1       	ldi	r18, 0x10	; 16
 b4c:	32 e0       	ldi	r19, 0x02	; 2
 b4e:	f8 01       	movw	r30, r16
 b50:	b7 fe       	sbrs	r11, 7
 b52:	07 c0       	rjmp	.+14     	; 0xb62 <__stack+0x263>
 b54:	60 81       	ld	r22, Z
 b56:	71 81       	ldd	r23, Z+1	; 0x01
 b58:	82 81       	ldd	r24, Z+2	; 0x02
 b5a:	93 81       	ldd	r25, Z+3	; 0x03
 b5c:	0c 5f       	subi	r16, 0xFC	; 252
 b5e:	1f 4f       	sbci	r17, 0xFF	; 255
 b60:	06 c0       	rjmp	.+12     	; 0xb6e <__stack+0x26f>
 b62:	60 81       	ld	r22, Z
 b64:	71 81       	ldd	r23, Z+1	; 0x01
 b66:	80 e0       	ldi	r24, 0x00	; 0
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	0e 5f       	subi	r16, 0xFE	; 254
 b6c:	1f 4f       	sbci	r17, 0xFF	; 255
 b6e:	a3 01       	movw	r20, r6
 b70:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ultoa_invert>
 b74:	88 2e       	mov	r8, r24
 b76:	86 18       	sub	r8, r6
 b78:	fb 2d       	mov	r31, r11
 b7a:	ff 77       	andi	r31, 0x7F	; 127
 b7c:	3f 2e       	mov	r3, r31
 b7e:	36 fe       	sbrs	r3, 6
 b80:	0d c0       	rjmp	.+26     	; 0xb9c <__stack+0x29d>
 b82:	23 2d       	mov	r18, r3
 b84:	2e 7f       	andi	r18, 0xFE	; 254
 b86:	a2 2e       	mov	r10, r18
 b88:	89 14       	cp	r8, r9
 b8a:	58 f4       	brcc	.+22     	; 0xba2 <__stack+0x2a3>
 b8c:	34 fe       	sbrs	r3, 4
 b8e:	0b c0       	rjmp	.+22     	; 0xba6 <__stack+0x2a7>
 b90:	32 fc       	sbrc	r3, 2
 b92:	09 c0       	rjmp	.+18     	; 0xba6 <__stack+0x2a7>
 b94:	83 2d       	mov	r24, r3
 b96:	8e 7e       	andi	r24, 0xEE	; 238
 b98:	a8 2e       	mov	r10, r24
 b9a:	05 c0       	rjmp	.+10     	; 0xba6 <__stack+0x2a7>
 b9c:	b8 2c       	mov	r11, r8
 b9e:	a3 2c       	mov	r10, r3
 ba0:	03 c0       	rjmp	.+6      	; 0xba8 <__stack+0x2a9>
 ba2:	b8 2c       	mov	r11, r8
 ba4:	01 c0       	rjmp	.+2      	; 0xba8 <__stack+0x2a9>
 ba6:	b9 2c       	mov	r11, r9
 ba8:	a4 fe       	sbrs	r10, 4
 baa:	0f c0       	rjmp	.+30     	; 0xbca <__stack+0x2cb>
 bac:	fe 01       	movw	r30, r28
 bae:	e8 0d       	add	r30, r8
 bb0:	f1 1d       	adc	r31, r1
 bb2:	80 81       	ld	r24, Z
 bb4:	80 33       	cpi	r24, 0x30	; 48
 bb6:	21 f4       	brne	.+8      	; 0xbc0 <__stack+0x2c1>
 bb8:	9a 2d       	mov	r25, r10
 bba:	99 7e       	andi	r25, 0xE9	; 233
 bbc:	a9 2e       	mov	r10, r25
 bbe:	09 c0       	rjmp	.+18     	; 0xbd2 <__stack+0x2d3>
 bc0:	a2 fe       	sbrs	r10, 2
 bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <__stack+0x2d1>
 bc4:	b3 94       	inc	r11
 bc6:	b3 94       	inc	r11
 bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <__stack+0x2d3>
 bca:	8a 2d       	mov	r24, r10
 bcc:	86 78       	andi	r24, 0x86	; 134
 bce:	09 f0       	breq	.+2      	; 0xbd2 <__stack+0x2d3>
 bd0:	b3 94       	inc	r11
 bd2:	a3 fc       	sbrc	r10, 3
 bd4:	11 c0       	rjmp	.+34     	; 0xbf8 <__stack+0x2f9>
 bd6:	a0 fe       	sbrs	r10, 0
 bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <__stack+0x2e7>
 bda:	b2 14       	cp	r11, r2
 bdc:	88 f4       	brcc	.+34     	; 0xc00 <__stack+0x301>
 bde:	28 0c       	add	r2, r8
 be0:	92 2c       	mov	r9, r2
 be2:	9b 18       	sub	r9, r11
 be4:	0e c0       	rjmp	.+28     	; 0xc02 <__stack+0x303>
 be6:	b2 14       	cp	r11, r2
 be8:	60 f4       	brcc	.+24     	; 0xc02 <__stack+0x303>
 bea:	b6 01       	movw	r22, r12
 bec:	80 e2       	ldi	r24, 0x20	; 32
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 bf4:	b3 94       	inc	r11
 bf6:	f7 cf       	rjmp	.-18     	; 0xbe6 <__stack+0x2e7>
 bf8:	b2 14       	cp	r11, r2
 bfa:	18 f4       	brcc	.+6      	; 0xc02 <__stack+0x303>
 bfc:	2b 18       	sub	r2, r11
 bfe:	02 c0       	rjmp	.+4      	; 0xc04 <__stack+0x305>
 c00:	98 2c       	mov	r9, r8
 c02:	21 2c       	mov	r2, r1
 c04:	a4 fe       	sbrs	r10, 4
 c06:	10 c0       	rjmp	.+32     	; 0xc28 <__stack+0x329>
 c08:	b6 01       	movw	r22, r12
 c0a:	80 e3       	ldi	r24, 0x30	; 48
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 c12:	a2 fe       	sbrs	r10, 2
 c14:	17 c0       	rjmp	.+46     	; 0xc44 <__stack+0x345>
 c16:	a1 fc       	sbrc	r10, 1
 c18:	03 c0       	rjmp	.+6      	; 0xc20 <__stack+0x321>
 c1a:	88 e7       	ldi	r24, 0x78	; 120
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	02 c0       	rjmp	.+4      	; 0xc24 <__stack+0x325>
 c20:	88 e5       	ldi	r24, 0x58	; 88
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	b6 01       	movw	r22, r12
 c26:	0c c0       	rjmp	.+24     	; 0xc40 <__stack+0x341>
 c28:	8a 2d       	mov	r24, r10
 c2a:	86 78       	andi	r24, 0x86	; 134
 c2c:	59 f0       	breq	.+22     	; 0xc44 <__stack+0x345>
 c2e:	a1 fe       	sbrs	r10, 1
 c30:	02 c0       	rjmp	.+4      	; 0xc36 <__stack+0x337>
 c32:	8b e2       	ldi	r24, 0x2B	; 43
 c34:	01 c0       	rjmp	.+2      	; 0xc38 <__stack+0x339>
 c36:	80 e2       	ldi	r24, 0x20	; 32
 c38:	a7 fc       	sbrc	r10, 7
 c3a:	8d e2       	ldi	r24, 0x2D	; 45
 c3c:	b6 01       	movw	r22, r12
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 c44:	89 14       	cp	r8, r9
 c46:	38 f4       	brcc	.+14     	; 0xc56 <__stack+0x357>
 c48:	b6 01       	movw	r22, r12
 c4a:	80 e3       	ldi	r24, 0x30	; 48
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 c52:	9a 94       	dec	r9
 c54:	f7 cf       	rjmp	.-18     	; 0xc44 <__stack+0x345>
 c56:	8a 94       	dec	r8
 c58:	f3 01       	movw	r30, r6
 c5a:	e8 0d       	add	r30, r8
 c5c:	f1 1d       	adc	r31, r1
 c5e:	80 81       	ld	r24, Z
 c60:	b6 01       	movw	r22, r12
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 c68:	81 10       	cpse	r8, r1
 c6a:	f5 cf       	rjmp	.-22     	; 0xc56 <__stack+0x357>
 c6c:	22 20       	and	r2, r2
 c6e:	09 f4       	brne	.+2      	; 0xc72 <__stack+0x373>
 c70:	42 ce       	rjmp	.-892    	; 0x8f6 <vfprintf+0x24>
 c72:	b6 01       	movw	r22, r12
 c74:	80 e2       	ldi	r24, 0x20	; 32
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 c7c:	2a 94       	dec	r2
 c7e:	f6 cf       	rjmp	.-20     	; 0xc6c <__stack+0x36d>
 c80:	f6 01       	movw	r30, r12
 c82:	86 81       	ldd	r24, Z+6	; 0x06
 c84:	97 81       	ldd	r25, Z+7	; 0x07
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <__stack+0x38d>
 c88:	8f ef       	ldi	r24, 0xFF	; 255
 c8a:	9f ef       	ldi	r25, 0xFF	; 255
 c8c:	2b 96       	adiw	r28, 0x0b	; 11
 c8e:	e2 e1       	ldi	r30, 0x12	; 18
 c90:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__epilogue_restores__>

00000c94 <strnlen_P>:
 c94:	fc 01       	movw	r30, r24
 c96:	05 90       	lpm	r0, Z+
 c98:	61 50       	subi	r22, 0x01	; 1
 c9a:	70 40       	sbci	r23, 0x00	; 0
 c9c:	01 10       	cpse	r0, r1
 c9e:	d8 f7       	brcc	.-10     	; 0xc96 <strnlen_P+0x2>
 ca0:	80 95       	com	r24
 ca2:	90 95       	com	r25
 ca4:	8e 0f       	add	r24, r30
 ca6:	9f 1f       	adc	r25, r31
 ca8:	08 95       	ret

00000caa <strnlen>:
 caa:	fc 01       	movw	r30, r24
 cac:	61 50       	subi	r22, 0x01	; 1
 cae:	70 40       	sbci	r23, 0x00	; 0
 cb0:	01 90       	ld	r0, Z+
 cb2:	01 10       	cpse	r0, r1
 cb4:	d8 f7       	brcc	.-10     	; 0xcac <strnlen+0x2>
 cb6:	80 95       	com	r24
 cb8:	90 95       	com	r25
 cba:	8e 0f       	add	r24, r30
 cbc:	9f 1f       	adc	r25, r31
 cbe:	08 95       	ret

00000cc0 <fputc>:
 cc0:	0f 93       	push	r16
 cc2:	1f 93       	push	r17
 cc4:	cf 93       	push	r28
 cc6:	df 93       	push	r29
 cc8:	fb 01       	movw	r30, r22
 cca:	23 81       	ldd	r18, Z+3	; 0x03
 ccc:	21 fd       	sbrc	r18, 1
 cce:	03 c0       	rjmp	.+6      	; 0xcd6 <fputc+0x16>
 cd0:	8f ef       	ldi	r24, 0xFF	; 255
 cd2:	9f ef       	ldi	r25, 0xFF	; 255
 cd4:	2c c0       	rjmp	.+88     	; 0xd2e <fputc+0x6e>
 cd6:	22 ff       	sbrs	r18, 2
 cd8:	16 c0       	rjmp	.+44     	; 0xd06 <fputc+0x46>
 cda:	46 81       	ldd	r20, Z+6	; 0x06
 cdc:	57 81       	ldd	r21, Z+7	; 0x07
 cde:	24 81       	ldd	r18, Z+4	; 0x04
 ce0:	35 81       	ldd	r19, Z+5	; 0x05
 ce2:	42 17       	cp	r20, r18
 ce4:	53 07       	cpc	r21, r19
 ce6:	44 f4       	brge	.+16     	; 0xcf8 <fputc+0x38>
 ce8:	a0 81       	ld	r26, Z
 cea:	b1 81       	ldd	r27, Z+1	; 0x01
 cec:	9d 01       	movw	r18, r26
 cee:	2f 5f       	subi	r18, 0xFF	; 255
 cf0:	3f 4f       	sbci	r19, 0xFF	; 255
 cf2:	31 83       	std	Z+1, r19	; 0x01
 cf4:	20 83       	st	Z, r18
 cf6:	8c 93       	st	X, r24
 cf8:	26 81       	ldd	r18, Z+6	; 0x06
 cfa:	37 81       	ldd	r19, Z+7	; 0x07
 cfc:	2f 5f       	subi	r18, 0xFF	; 255
 cfe:	3f 4f       	sbci	r19, 0xFF	; 255
 d00:	37 83       	std	Z+7, r19	; 0x07
 d02:	26 83       	std	Z+6, r18	; 0x06
 d04:	14 c0       	rjmp	.+40     	; 0xd2e <fputc+0x6e>
 d06:	8b 01       	movw	r16, r22
 d08:	ec 01       	movw	r28, r24
 d0a:	fb 01       	movw	r30, r22
 d0c:	00 84       	ldd	r0, Z+8	; 0x08
 d0e:	f1 85       	ldd	r31, Z+9	; 0x09
 d10:	e0 2d       	mov	r30, r0
 d12:	09 95       	icall
 d14:	89 2b       	or	r24, r25
 d16:	e1 f6       	brne	.-72     	; 0xcd0 <fputc+0x10>
 d18:	d8 01       	movw	r26, r16
 d1a:	16 96       	adiw	r26, 0x06	; 6
 d1c:	8d 91       	ld	r24, X+
 d1e:	9c 91       	ld	r25, X
 d20:	17 97       	sbiw	r26, 0x07	; 7
 d22:	01 96       	adiw	r24, 0x01	; 1
 d24:	17 96       	adiw	r26, 0x07	; 7
 d26:	9c 93       	st	X, r25
 d28:	8e 93       	st	-X, r24
 d2a:	16 97       	sbiw	r26, 0x06	; 6
 d2c:	ce 01       	movw	r24, r28
 d2e:	df 91       	pop	r29
 d30:	cf 91       	pop	r28
 d32:	1f 91       	pop	r17
 d34:	0f 91       	pop	r16
 d36:	08 95       	ret

00000d38 <__ultoa_invert>:
 d38:	fa 01       	movw	r30, r20
 d3a:	aa 27       	eor	r26, r26
 d3c:	28 30       	cpi	r18, 0x08	; 8
 d3e:	51 f1       	breq	.+84     	; 0xd94 <__ultoa_invert+0x5c>
 d40:	20 31       	cpi	r18, 0x10	; 16
 d42:	81 f1       	breq	.+96     	; 0xda4 <__ultoa_invert+0x6c>
 d44:	e8 94       	clt
 d46:	6f 93       	push	r22
 d48:	6e 7f       	andi	r22, 0xFE	; 254
 d4a:	6e 5f       	subi	r22, 0xFE	; 254
 d4c:	7f 4f       	sbci	r23, 0xFF	; 255
 d4e:	8f 4f       	sbci	r24, 0xFF	; 255
 d50:	9f 4f       	sbci	r25, 0xFF	; 255
 d52:	af 4f       	sbci	r26, 0xFF	; 255
 d54:	b1 e0       	ldi	r27, 0x01	; 1
 d56:	3e d0       	rcall	.+124    	; 0xdd4 <__ultoa_invert+0x9c>
 d58:	b4 e0       	ldi	r27, 0x04	; 4
 d5a:	3c d0       	rcall	.+120    	; 0xdd4 <__ultoa_invert+0x9c>
 d5c:	67 0f       	add	r22, r23
 d5e:	78 1f       	adc	r23, r24
 d60:	89 1f       	adc	r24, r25
 d62:	9a 1f       	adc	r25, r26
 d64:	a1 1d       	adc	r26, r1
 d66:	68 0f       	add	r22, r24
 d68:	79 1f       	adc	r23, r25
 d6a:	8a 1f       	adc	r24, r26
 d6c:	91 1d       	adc	r25, r1
 d6e:	a1 1d       	adc	r26, r1
 d70:	6a 0f       	add	r22, r26
 d72:	71 1d       	adc	r23, r1
 d74:	81 1d       	adc	r24, r1
 d76:	91 1d       	adc	r25, r1
 d78:	a1 1d       	adc	r26, r1
 d7a:	20 d0       	rcall	.+64     	; 0xdbc <__ultoa_invert+0x84>
 d7c:	09 f4       	brne	.+2      	; 0xd80 <__ultoa_invert+0x48>
 d7e:	68 94       	set
 d80:	3f 91       	pop	r19
 d82:	2a e0       	ldi	r18, 0x0A	; 10
 d84:	26 9f       	mul	r18, r22
 d86:	11 24       	eor	r1, r1
 d88:	30 19       	sub	r19, r0
 d8a:	30 5d       	subi	r19, 0xD0	; 208
 d8c:	31 93       	st	Z+, r19
 d8e:	de f6       	brtc	.-74     	; 0xd46 <__ultoa_invert+0xe>
 d90:	cf 01       	movw	r24, r30
 d92:	08 95       	ret
 d94:	46 2f       	mov	r20, r22
 d96:	47 70       	andi	r20, 0x07	; 7
 d98:	40 5d       	subi	r20, 0xD0	; 208
 d9a:	41 93       	st	Z+, r20
 d9c:	b3 e0       	ldi	r27, 0x03	; 3
 d9e:	0f d0       	rcall	.+30     	; 0xdbe <__ultoa_invert+0x86>
 da0:	c9 f7       	brne	.-14     	; 0xd94 <__ultoa_invert+0x5c>
 da2:	f6 cf       	rjmp	.-20     	; 0xd90 <__ultoa_invert+0x58>
 da4:	46 2f       	mov	r20, r22
 da6:	4f 70       	andi	r20, 0x0F	; 15
 da8:	40 5d       	subi	r20, 0xD0	; 208
 daa:	4a 33       	cpi	r20, 0x3A	; 58
 dac:	18 f0       	brcs	.+6      	; 0xdb4 <__ultoa_invert+0x7c>
 dae:	49 5d       	subi	r20, 0xD9	; 217
 db0:	31 fd       	sbrc	r19, 1
 db2:	40 52       	subi	r20, 0x20	; 32
 db4:	41 93       	st	Z+, r20
 db6:	02 d0       	rcall	.+4      	; 0xdbc <__ultoa_invert+0x84>
 db8:	a9 f7       	brne	.-22     	; 0xda4 <__ultoa_invert+0x6c>
 dba:	ea cf       	rjmp	.-44     	; 0xd90 <__ultoa_invert+0x58>
 dbc:	b4 e0       	ldi	r27, 0x04	; 4
 dbe:	a6 95       	lsr	r26
 dc0:	97 95       	ror	r25
 dc2:	87 95       	ror	r24
 dc4:	77 95       	ror	r23
 dc6:	67 95       	ror	r22
 dc8:	ba 95       	dec	r27
 dca:	c9 f7       	brne	.-14     	; 0xdbe <__ultoa_invert+0x86>
 dcc:	00 97       	sbiw	r24, 0x00	; 0
 dce:	61 05       	cpc	r22, r1
 dd0:	71 05       	cpc	r23, r1
 dd2:	08 95       	ret
 dd4:	9b 01       	movw	r18, r22
 dd6:	ac 01       	movw	r20, r24
 dd8:	0a 2e       	mov	r0, r26
 dda:	06 94       	lsr	r0
 ddc:	57 95       	ror	r21
 dde:	47 95       	ror	r20
 de0:	37 95       	ror	r19
 de2:	27 95       	ror	r18
 de4:	ba 95       	dec	r27
 de6:	c9 f7       	brne	.-14     	; 0xdda <__ultoa_invert+0xa2>
 de8:	62 0f       	add	r22, r18
 dea:	73 1f       	adc	r23, r19
 dec:	84 1f       	adc	r24, r20
 dee:	95 1f       	adc	r25, r21
 df0:	a0 1d       	adc	r26, r0
 df2:	08 95       	ret

00000df4 <__prologue_saves__>:
 df4:	2f 92       	push	r2
 df6:	3f 92       	push	r3
 df8:	4f 92       	push	r4
 dfa:	5f 92       	push	r5
 dfc:	6f 92       	push	r6
 dfe:	7f 92       	push	r7
 e00:	8f 92       	push	r8
 e02:	9f 92       	push	r9
 e04:	af 92       	push	r10
 e06:	bf 92       	push	r11
 e08:	cf 92       	push	r12
 e0a:	df 92       	push	r13
 e0c:	ef 92       	push	r14
 e0e:	ff 92       	push	r15
 e10:	0f 93       	push	r16
 e12:	1f 93       	push	r17
 e14:	cf 93       	push	r28
 e16:	df 93       	push	r29
 e18:	cd b7       	in	r28, 0x3d	; 61
 e1a:	de b7       	in	r29, 0x3e	; 62
 e1c:	ca 1b       	sub	r28, r26
 e1e:	db 0b       	sbc	r29, r27
 e20:	0f b6       	in	r0, 0x3f	; 63
 e22:	f8 94       	cli
 e24:	de bf       	out	0x3e, r29	; 62
 e26:	0f be       	out	0x3f, r0	; 63
 e28:	cd bf       	out	0x3d, r28	; 61
 e2a:	09 94       	ijmp

00000e2c <__epilogue_restores__>:
 e2c:	2a 88       	ldd	r2, Y+18	; 0x12
 e2e:	39 88       	ldd	r3, Y+17	; 0x11
 e30:	48 88       	ldd	r4, Y+16	; 0x10
 e32:	5f 84       	ldd	r5, Y+15	; 0x0f
 e34:	6e 84       	ldd	r6, Y+14	; 0x0e
 e36:	7d 84       	ldd	r7, Y+13	; 0x0d
 e38:	8c 84       	ldd	r8, Y+12	; 0x0c
 e3a:	9b 84       	ldd	r9, Y+11	; 0x0b
 e3c:	aa 84       	ldd	r10, Y+10	; 0x0a
 e3e:	b9 84       	ldd	r11, Y+9	; 0x09
 e40:	c8 84       	ldd	r12, Y+8	; 0x08
 e42:	df 80       	ldd	r13, Y+7	; 0x07
 e44:	ee 80       	ldd	r14, Y+6	; 0x06
 e46:	fd 80       	ldd	r15, Y+5	; 0x05
 e48:	0c 81       	ldd	r16, Y+4	; 0x04
 e4a:	1b 81       	ldd	r17, Y+3	; 0x03
 e4c:	aa 81       	ldd	r26, Y+2	; 0x02
 e4e:	b9 81       	ldd	r27, Y+1	; 0x01
 e50:	ce 0f       	add	r28, r30
 e52:	d1 1d       	adc	r29, r1
 e54:	0f b6       	in	r0, 0x3f	; 63
 e56:	f8 94       	cli
 e58:	de bf       	out	0x3e, r29	; 62
 e5a:	0f be       	out	0x3f, r0	; 63
 e5c:	cd bf       	out	0x3d, r28	; 61
 e5e:	ed 01       	movw	r28, r26
 e60:	08 95       	ret

00000e62 <_exit>:
 e62:	f8 94       	cli

00000e64 <__stop_program>:
 e64:	ff cf       	rjmp	.-2      	; 0xe64 <__stop_program>
